{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-66b2084c\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"form\"\n};\nvar _hoisted_2 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"h3\", null, \"Update Post\", -1 /* HOISTED */);\n});\nvar _hoisted_3 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"label\", {\n    \"for\": \"body\"\n  }, \"Post Body\", -1 /* HOISTED */);\n});\nvar _hoisted_4 = {\n  \"class\": \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _hoisted_3, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.updatedBody = $event;\n    }),\n    rows: \"4\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.updatedBody]]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.updatePost && $options.updatePost.apply($options, arguments);\n    }),\n    \"class\": \"center\"\n  }, \"Update\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.deletePost && $options.deletePost.apply($options, arguments);\n    }),\n    \"class\": \"center right\"\n  }, \"Delete\")])]);\n}","map":{"version":3,"mappings":";;;;;EACO,SAAM;AAAM;;sBACfA,oBAAoB,YAAhB,aAAW;AAAA;;sBACfA,oBAAmC;IAA5B,OAAI;EAAM,GAAC,WAAS;AAAA;;EAEtB,SAAM;AAAW;;uBAJxBC,oBAQM,OARNC,UAQM,GAPJC,UAAoB,EACpBC,UAAmC,kBACnCJ,oBAAoD;;aAAjCK,iBAAW;IAAA;IAAEC,IAAI,EAAC;iDAAlBD,iBAAW,KAC9BL,oBAGM,OAHNO,UAGM,GAFJP,oBAA0D;IAAjDQ,OAAK;MAAA,OAAEC,qEAAU;IAAA;IAAE,SAAM;KAAS,QAAM,GACjDT,oBAAgE;IAAvDQ,OAAK;MAAA,OAAEC,qEAAU;IAAA;IAAE,SAAM;KAAe,QAAM","names":["_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","$data","rows","_hoisted_4","onClick","$options"],"sourceRoot":"","sources":["C:\\Users\\davidjaa\\Documents\\WAD\\WAD2023-HW4-Frotend\\src\\views\\Post.vue"],"sourcesContent":["<template>\r\n  <div class=\"form\">\r\n    <h3>Update Post</h3>\r\n    <label for=\"body\">Post Body</label>\r\n    <textarea v-model=\"updatedBody\" rows=\"4\"></textarea>\r\n    <div class=\"container\">\r\n      <button @click=\"updatePost\" class=\"center\">Update</button>\r\n      <button @click=\"deletePost\" class=\"center right\">Delete</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Post',\r\n  data() {\r\n    return {\r\n      post: {},\r\n      updatedBody: '',\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchPost() {\r\n      const postId = this.$route.params.postId;\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/posts/${postId}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + document.cookie.split('=')[1],\r\n          },\r\n          credentials: 'include',\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          this.post = data;\r\n          this.updatedBody = data.body; // Set the initial value for the updatedBody\r\n        } else {\r\n          console.error('Failed to fetch post details');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    async updatePost() {\r\n      const postId = this.$route.params.postId;\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/posts/${postId}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + document.cookie.split('=')[1],\r\n          },\r\n          credentials: 'include',\r\n          body: JSON.stringify({ body: this.updatedBody }),\r\n        });\r\n\r\n        if (response.ok) {\r\n          console.log('Post updated successfully');\r\n          // Refresh post details after update\r\n          this.fetchPost();\r\n\r\n          this.$router.push(\"/\");\r\n        } else {\r\n          console.error('Failed to update post');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    async deletePost() {\r\n      const postId = this.$route.params.postId;\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/posts/${postId}`, {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Authorization': 'Bearer ' + document.cookie.split('=')[1],\r\n          },\r\n          credentials: 'include',\r\n        });\r\n\r\n        if (response.ok) {\r\n          console.log('Post deleted successfully');\r\n          // Optionally, you can navigate back to the home page after deletion\r\n          this.$router.push('/');\r\n        } else {\r\n          console.error('Failed to delete post');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      const date = new Date(dateString);\r\n      return `${String(date.getDate()).padStart(2, '0')}-${String(date.getMonth() + 1).padStart(2, '0')}-${date.getFullYear()}`;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchPost();\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.form {\r\n  max-width: 420px;\r\n  margin: 30px auto;\r\n  background: rgb(216, 212, 212);\r\n  text-align: left;\r\n  padding: 40px;\r\n  border-radius: 10px;\r\n}\r\nh3 {\r\n  text-align: center;\r\n  color: rgb(8, 110, 110);\r\n}\r\nlabel {\r\n  color: rgb(8, 110, 110);\r\n  display: inline-block;\r\n  margin: 25px 0 15px;\r\n  font-size: 0.8em;\r\n  text-transform: uppercase;\r\n  letter-spacing: 1px;\r\n  font-weight: bold;\r\n}\r\ntextarea {\r\n  display: block;\r\n  padding: 10px 6px;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  border: none;\r\n  border-bottom: 1px solid white;\r\n}\r\nbutton {\r\n  background: rgb(8, 110, 110);\r\n  border: 0;\r\n  padding: 10px 20px;\r\n  margin-top: 20px;\r\n  color: white;\r\n  border-radius: 20px;\r\n  align-items: center;\r\n  text-align: center;\r\n}\r\n\r\n.right {\r\n  margin-right: auto;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}